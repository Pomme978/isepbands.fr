generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Badge {
  id     Int    @id @default(autoincrement())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId], map: "Badge_userId_fkey")
}

model RegistrationRequest {
  id              Int                @id @default(autoincrement())
  userId          String             @unique
  status          RegistrationStatus @default(PENDING)
  createdAt       DateTime           @default(now())
  motivation      String?
  experience      String?
  rejectionReason String?
  user            User               @relation(fields: [userId], references: [id])
}

model User {
  id                            String               @id @default(uuid())
  firstName                     String               @default("Pr√©nom")
  lastName                      String               @default("Nom")
  promotion                     String
  birthDate                     DateTime
  biography                     String?
  phone                         String?
  password                      String
  email                         String               @unique
  emailVerified                 Boolean              @default(false)
  emailVerificationToken        String?
  emailVerificationTokenExpires DateTime?
  emailVerifiedAt               DateTime?
  photoUrl                      String?
  status                        UserStatus           @default(PENDING)
  isLookingForGroup             Boolean              @default(false)
  pronouns                      String?
  preferredGenres               String?
  isFullAccess                  Boolean              @default(false)
  createdAt                     DateTime             @default(now())
  updatedAt                     DateTime?            @default(now()) @updatedAt
  badges                        Badge[]
  groupMemberships              GroupMembership[]
  ownedNews                     News[]
  registrationRequest           RegistrationRequest?
  storageObjects                StorageObject[]
  instruments                   UserInstrument[]
  roles                         UserRole[]
  votes                         Vote[]
  activities                    Activity[]
  systemLogs                    SystemLog[] @relation("SystemLogPerformedBy")
}

model StorageObject {
  id          String   @id @default(uuid())
  key         String   @unique
  url         String
  size        Int
  contentType String
  uploadedAt  DateTime @default(now())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "StorageObject_userId_fkey")
}

model Instrument {
  id                Int                     @id @default(autoincrement())
  name              String
  nameFr            String
  nameEn            String
  imageUrl          String?
  groupRequirements InstrumentRequirement[]
  users             UserInstrument[]
}

model UserInstrument {
  userId       String
  instrumentId Int
  skillLevel   SkillLevel
  yearsPlaying Int?
  isPrimary    Boolean    @default(false)
  instrument   Instrument @relation(fields: [instrumentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, instrumentId])
  @@index([instrumentId], map: "UserInstrument_instrumentId_fkey")
}

model Role {
  id           Int              @id @default(autoincrement())
  name         String
  nameFrMale   String
  nameFrFemale String
  nameEnMale   String
  nameEnFemale String
  weight       Int
  isCore       Boolean          @default(false)
  permissions  RolePermission[]
  users        UserRole[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String
  nameFr      String
  nameEn      String
  description String?
  roles       RolePermission[]
}

model UserRole {
  userId String
  roleId Int
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@index([roleId], map: "UserRole_roleId_fkey")
}

model RolePermission {
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model Group {
  id                     Int                     @id @default(autoincrement())
  name                   String
  description            String?
  imageUrl               String?
  isVerified             Boolean                 @default(false)
  isLookingForMembers    Boolean                 @default(false)
  isInPreparation        Boolean                 @default(false)
  genre                  String?
  events                 GroupEvent[]
  members                GroupMembership[]
  instrumentRequirements InstrumentRequirement[]
  setlists               Setlist[]
}

model GroupMembership {
  userId  String
  groupId Int
  role    String?
  isAdmin Boolean @default(false)
  group   Group   @relation(fields: [groupId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([userId, groupId])
  @@index([groupId], map: "GroupMembership_groupId_fkey")
}

model InstrumentRequirement {
  groupId       Int
  instrumentId  Int
  requiredCount Int
  currentCount  Int
  group         Group      @relation(fields: [groupId], references: [id])
  instrument    Instrument @relation(fields: [instrumentId], references: [id])

  @@id([groupId, instrumentId])
  @@index([instrumentId], map: "InstrumentRequirement_instrumentId_fkey")
}

model Event {
  id           Int          @id @default(autoincrement())
  name         String
  type         EventType
  date         DateTime
  location     String?
  description  String?
  isPinned     Boolean      @default(false)
  isVisible    Boolean      @default(true)
  isArchived   Boolean      @default(false)
  helloAssoUrl String?
  venueId      String?      // Relation to Venue
  venue        Venue?       @relation(fields: [venueId], references: [id])
  groups       GroupEvent[]
  setlists     Setlist[]

  @@index([venueId], map: "Event_venueId_fkey")
}

model Venue {
  id                  String      @id @default(uuid())
  name                String
  description         String?     @db.Text
  venueType           VenueType
  address             String
  city                String
  postalCode          String?
  country             String      @default("France")
  photoUrl            String?
  metroLine           String?
  accessInstructions  String?     @db.Text
  staffNotes          String?     @db.Text
  status              VenueStatus @default(ACTIVE)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @default(now()) @updatedAt
  events              Event[]

  @@index([status], map: "Venue_status_idx")
  @@index([venueType], map: "Venue_venueType_idx")
  @@index([city], map: "Venue_city_idx")
}

model GroupEvent {
  groupId Int
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])
  group   Group @relation(fields: [groupId], references: [id])

  @@id([groupId, eventId])
  @@index([eventId], map: "GroupEvent_eventId_fkey")
}

model Setlist {
  id      Int           @id @default(autoincrement())
  groupId Int
  eventId Int
  event   Event         @relation(fields: [eventId], references: [id])
  group   Group         @relation(fields: [groupId], references: [id])
  songs   SetlistSong[]

  @@unique([groupId, eventId])
  @@index([eventId], map: "Setlist_eventId_fkey")
}

model SetlistSong {
  id            Int     @id @default(autoincrement())
  setlistId     Int
  youtubeUrl    String?
  spotifyUrl    String?
  appleMusicUrl String?
  title         String
  artist        String
  imageUrl      String?
  setlist       Setlist @relation(fields: [setlistId], references: [id])
  votes         Vote[]

  @@index([setlistId], map: "SetlistSong_setlistId_fkey")
}

model Vote {
  userId String
  songId Int
  song   SetlistSong @relation(fields: [songId], references: [id])
  user   User        @relation(fields: [userId], references: [id])

  @@id([userId, songId])
  @@index([songId], map: "Vote_songId_fkey")
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  type      String
  startDate DateTime
  endDate   DateTime
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "News_authorId_fkey")
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // 'user_joined', 'group_created', 'event_created', 'achievement', 'custom'
  title       String
  description String?  @db.Text
  metadata    Json?    // Additional data specific to activity type
  userId      String?  // User this activity is about
  createdBy   String?  // Admin who created manual activity
  createdAt   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "Activity_userId_fkey")
  @@index([createdAt], map: "Activity_createdAt_idx")
}

enum UserStatus {
  CURRENT
  FORMER
  GRADUATED
  ALUMNI
  PENDING
  REFUSED
  DELETED
}

enum RegistrationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum EventType {
  CONCERT
  JAM
  REPETITION
  VENTE
  SHOWCASE
  OTHER
}

enum VenueType {
  CAMPUS
  CONCERT_HALL
  REHEARSAL_ROOM
  RECORDING_STUDIO
  BAR
  RESTAURANT
  NIGHTCLUB
  EXTERNAL
  OTHER
}

enum VenueStatus {
  ACTIVE
  INACTIVE
  AVOID
}

model MusicGenre {
  id     String @id
  nameFr String
  nameEn String
}

model SystemSettings {
  id                        Int      @id @default(1)
  currentYear              String
  primaryColor             String   @default("oklch(0.559 0.238 307.331)")
  associationName          String   @default("ISEP Bands")
  associationLegalStatus   String   @default("Association loi 1901")
  associationAddress       String   @default("")
  associationSiret         String?
  associationEmail         String   @default("contact@isepbands.fr")
  publicationDirectorName  String   @default("")
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now()) @updatedAt
}

model SystemLog {
  id            Int      @id @default(autoincrement())
  action        String   // 'YEAR_MIGRATION', 'SETTINGS_UPDATE', etc.
  details       Json     // Additional data about the action
  performedById String
  createdAt     DateTime @default(now())
  
  performedBy   User     @relation(fields: [performedById], references: [id], name: "SystemLogPerformedBy")

  @@index([performedById], map: "SystemLog_performedById_fkey")
  @@index([createdAt], map: "SystemLog_createdAt_idx")
}