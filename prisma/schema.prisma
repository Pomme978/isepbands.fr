generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model RegistrationRequest {
  id        Int                        @id @default(autoincrement())
  userId    Int                        @unique
  status    RegistrationRequest_status @default(PENDING)
  createdAt DateTime                   @default(now())
  user      User                       @relation(fields: [userId], references: [id])
}

model User {
  id                  Int                  @id @default(autoincrement())
  name                String
  surname             String
  username            String               @unique
  promotion           String
  birthDate           DateTime
  biography           String?
  password            String
  email               String               @unique
  emailVerified       Boolean              @default(false)
  photoUrl            String?
  status              String               @default("membre")
  isLookingForGroup   Boolean              @default(false)
  groupMemberships    GroupMembership[]
  ownedNews           News[]
  registrationRequest RegistrationRequest?
  storageObjects      StorageObject[]
  instruments         UserInstrument[]
  roles               UserRole[]
  votes               Vote[]
}

model StorageObject {
  id          String   @id @default(uuid())
  key         String   @unique
  url         String
  size        Int
  contentType String
  category    String?  // Category: avatars, events, inventory, venues, groups, badges, documents
  uploadedAt  DateTime @default(now())
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "StorageObject_userId_fkey")
  @@index([category])
}

model Instrument {
  id                Int                     @id @default(autoincrement())
  name              String
  imageUrl          String?
  groupRequirements InstrumentRequirement[]
  users             UserInstrument[]
}

model UserInstrument {
  userId       Int
  instrumentId Int
  skillLevel   SkillLevel
  instrument   Instrument @relation(fields: [instrumentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, instrumentId])
  @@index([instrumentId], map: "UserInstrument_instrumentId_fkey")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  weight      Int
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id    Int              @id @default(autoincrement())
  name  String
  roles RolePermission[]
}

model UserRole {
  userId Int
  roleId Int
  role   Role @relation(fields: [roleId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@index([roleId], map: "UserRole_roleId_fkey")
}

model RolePermission {
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model Group {
  id                     Int                     @id @default(autoincrement())
  name                   String
  description            String?
  imageUrl               String?
  isVerified             Boolean                 @default(false)
  isLookingForMembers    Boolean                 @default(false)
  isInPreparation        Boolean                 @default(false)
  events                 GroupEvent[]
  members                GroupMembership[]
  instrumentRequirements InstrumentRequirement[]
  setlists               Setlist[]
}

model GroupMembership {
  userId  Int
  groupId Int
  role    String?
  isAdmin Boolean @default(false)
  group   Group   @relation(fields: [groupId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([userId, groupId])
  @@index([groupId], map: "GroupMembership_groupId_fkey")
}

model InstrumentRequirement {
  groupId       Int
  instrumentId  Int
  requiredCount Int
  currentCount  Int
  group         Group      @relation(fields: [groupId], references: [id])
  instrument    Instrument @relation(fields: [instrumentId], references: [id])

  @@id([groupId, instrumentId])
  @@index([instrumentId], map: "InstrumentRequirement_instrumentId_fkey")
}

model Event {
  id           Int          @id @default(autoincrement())
  name         String
  type         EventType
  date         DateTime
  location     String?
  description  String?
  isPinned     Boolean      @default(false)
  isVisible    Boolean      @default(true)
  isArchived   Boolean      @default(false)
  helloAssoUrl String?
  groups       GroupEvent[]
  setlists     Setlist[]
}

model GroupEvent {
  groupId Int
  eventId Int
  event   Event @relation(fields: [eventId], references: [id])
  group   Group @relation(fields: [groupId], references: [id])

  @@id([groupId, eventId])
  @@index([eventId], map: "GroupEvent_eventId_fkey")
}

model Setlist {
  id      Int           @id @default(autoincrement())
  groupId Int
  eventId Int
  event   Event         @relation(fields: [eventId], references: [id])
  group   Group         @relation(fields: [groupId], references: [id])
  songs   SetlistSong[]

  @@unique([groupId, eventId])
  @@index([eventId], map: "Setlist_eventId_fkey")
}

model SetlistSong {
  id            Int     @id @default(autoincrement())
  setlistId     Int
  youtubeUrl    String?
  spotifyUrl    String?
  appleMusicUrl String?
  title         String
  artist        String
  imageUrl      String?
  setlist       Setlist @relation(fields: [setlistId], references: [id])
  votes         Vote[]

  @@index([setlistId], map: "SetlistSong_setlistId_fkey")
}

model Vote {
  userId Int
  songId Int
  song   SetlistSong @relation(fields: [songId], references: [id])
  user   User        @relation(fields: [userId], references: [id])

  @@id([userId, songId])
  @@index([songId], map: "Vote_songId_fkey")
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  type      String
  startDate DateTime
  endDate   DateTime
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId], map: "News_authorId_fkey")
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum EventType {
  CONCERT
  JAM
  REPETITION
  VENTE
  SHOWCASE
  OTHER
}

enum RegistrationRequest_status {
  PENDING
  ACCEPTED
  REJECTED
}
